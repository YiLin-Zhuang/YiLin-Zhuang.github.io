[{"title":"【Docker】SSL自動配置與刷新container","url":"/2023/12/62041/","content":"\n\n使用 nginx-proxy 和 acme-companion 來自動配置 SSL，nginx-proxy 和 acme-companion 是兩個獨立但常一起使用的工具，用於簡化在 Nginx 反向代理上設置和管理 SSL/TLS 憑證的過程。\n\n\n介紹\nnginx-proxy：\nnginx-proxy 是一個 Docker 容器，用於自動化 Nginx 反向代理配置。\n它可以自動檢測運行在同一主機上的其他 Docker 容器，並自動創建相應的 Nginx 反向代理配置。\n通過簡單的環境變數設置，你可以指定哪些容器應該由 Nginx 代理，以及如何配置代理。\nnginx-proxy 使得添加、刪除或修改反向代理配置變得簡單，而不需要手動編輯 Nginx 配置文件。\n\n\nacme-companion：\nacme-companion 是另一個 Docker 容器，通常與 nginx-proxy 一起使用，用於管理 SSL&#x2F;TLS 憑證。\n它自動處理 Let’s Encrypt 等憑證頒發機構的 SSL&#x2F;TLS 憑證申請和更新。\nacme-companion 與 nginx-proxy 配合使用，可以自動檢測需要 SSL&#x2F;TLS 加密的容器，然後申請和安裝相應的憑證。\n它支持自動憑證更新，確保你的網站始終使用最新的有效憑證。\n\n\n\n教學步驟 1：下載 docker-compose.yml 檔案在終端機中執行以下指令以下載 docker-compose.yml 檔案，並修改 DEFAULT_EMAIL：\ncurl -LO https://raw.githubusercontent.com/YiLin-Zhuang/nginx-proxy/master/docker-compose.yml\n\n步驟 2：建立網路在終端機中執行以下指令以建立名為 “nginx-proxy” 的網路：\ndocker network create nginx-proxy\n\n步驟 3：啟動 nginx-proxy在終端機中執行以下指令以啟動 nginx-proxy：\ndocker-compose up -d\n\n步驟 4：建立範例網站在需要使用 SSL 的 docker-compose.yml 檔案中，加入 VIRTUAL_HOST、LETSENCRYPT_HOST 和 networks。以下範例設定以建立一個範例網站：\nwebsite:    image: nginx:alpine    container_name: website    restart: always    volumes:      - ./website:/usr/share/nginx/html:ro    environment:      # 將 &quot;www.yourdomain.com,yourdomain.com&quot; 替換為你的網域      - VIRTUAL_HOST=www.yourdomain.com,yourdomain.com      - LETSENCRYPT_HOST=www.yourdomain.com,yourdomain.com      # 如果需要指定端口，可以加入以下環境變數      #- VIRTUAL_PORT=8080# 加入 &quot;nginx-proxy&quot; 網路networks:  default:    external: true    name: nginx-proxy\n\n這些步驟將幫助你設定一個 proxy server，並自動更新 SSL 證書。\n\ngithub 連結。\n\n","categories":["Server"],"tags":["nginx-proxy","acme-companion","docker","Let's Encrypt SSL","docker-compose"]},{"title":"【IOS】創建自己的 IOS 套件庫 SPM、POD","url":"/2023/02/45797/","content":"\n\n\n當你開發多個專案時，你會發現在不同的專案中，你可能會使用到一些共通的類別或方法。為了讓你的開發更有效率，你可以創建自己的套件庫，方便在不同的專案中重複使用。\n\n\n\n\n\n\n創建套件庫\n\n\n\nSwift Package Manager\n\n\nCocoapods\n\n\n在 Swift 中，你可以使用 Swift Package Manager 或 Cocoapods 來創建和管理自己的套件庫。\n\n\nSwift Package Manager1. 創建 Package首先，你需要創建一個 Swift Package。在終端機中，進入你要創建套件庫的資料夾，並執行以下命令：\nswift package init --type library\n這會創建一個基本的 Swift Package，並且將它設置為一個庫。\n2. 編輯 Package.swift下一步，你需要打開創建的 Swift Package 的 Package.swift 檔案，編輯它以符合你的需求。在這個檔案中，你可以指定你的套件的名稱、目標平台、依賴項等等。你可以在這裡指定你的套件支援的 iOS 版本和 Swift 版本：\n// swift-tools-version:5.5// The swift-tools-version declares the minimum version of Swift required to build this package.import PackageDescriptionlet package = Package(    name: &quot;ZYLKit&quot;, // YourPackageName    platforms: [.iOS(.v13)],    products: [        .library(            name: &quot;ZYLKit&quot;, // YourPackageName            targets: [&quot;ZYLKit&quot;]), // YourPackageName    ],    dependencies: [    ],    targets: [        .target(            name: &quot;ZYLKit&quot;, // YourPackageName            dependencies: []),        .testTarget(            name: &quot;ZYLKitTests&quot;, // YourPackageNameTests            dependencies: [&quot;ZYLKit&quot;]), // YourPackageName    ],    swiftLanguageVersions: [.v5])\n3. 放入檔案接下來，你可以將你的類別和方法加入到你的套件中。將你的檔案放在 Sources&#x2F;YourPackageName 資料夾下。請注意，你的類別和方法需要加上 public 修飾符，以便在其他專案中使用。\n4. 上傳至 GitHub接下來，你需要將你的套件推送到 GitHub。請確保你的專案是公開的，以便其他人可以使用你的套件。\n\n\nCocoapods1. 創建 podspec 文件在你的套件包中添加 套件名.podspec 文件，該文件包含以下內容：\nPod::Spec.new do |s|s.name = &#x27;ZYLKit&#x27; # 套件名稱s.version = &#x27;0.1.0&#x27; # 套件版本s.summary = &#x27;一些好用的方法與封裝元件&#x27; # 套件說明s.homepage = &#x27;https://github.com/sdf0822/ZYLKit&#x27; # git URLs.license = &#123; :type =&gt; &#x27;MIT&#x27;, :file =&gt; &#x27;LICENSE&#x27; &#125; # LICENSE(可使用 github 產生)s.author = &#123; &#x27;yiLin&#x27; =&gt; &#x27;sdf0822@gmail.com&#x27; &#125; # 作者s.source = &#123; :git =&gt; &#x27;https://github.com/sdf0822/ZYLKit.git&#x27;, :tag =&gt; s.version &#125;  s.ios.deployment_target = &#x27;13.0&#x27; s.swift_version = &#x27;5.0&#x27; s.source_files = &#x27;Sources/ZYLKit/**/*&#x27; end\n\n2. 添加版本號 Tag在 GitHub 上創建一個與 podspec 版本號一致的 Tag，例如 0.1.0，並將其發佈到 GitHub 上。\n3. 檢查是否有錯誤在終端中輸入 pod spec lint 進行檢查，如果有錯誤則逐一解決。\n4. 註冊 session輸入 pod trunk register &quot;YourEmail&quot; &#39;YourName&#39; --description=&#39;imac&#39; 進行郵箱驗證。\n5. 檢查 session然後輸入 pod trunk me 檢查你是否已經登錄到 Cocoapods 服務器。\n6. 推送到 trunk推送套件到 Cocoapods 服務器，使用 pod trunk push 套件名.podspec 命令即可。等待官方審核後，即可使用 Cocoapods 將自己的套件導入到其他項目中，以上是整個流程的簡單介紹。\n\n你可以參照我的套件 連結 瞭解更多細節。\n\n","categories":["IOS"],"tags":["IOS","pod","SPM"]}]